{
  "queries": [
    {
        "name": "host_queries",
        "sql": "SELECT HOST AS host, FREE_PHYSICAL_MEMORY + USED_PHYSICAL_MEMORY AS physical_memory, USED_PHYSICAL_MEMORY AS physical_memory_used, FREE_SWAP_SPACE + USED_SWAP_SPACE AS swap_space, USED_SWAP_SPACE AS swap_space_used, INSTANCE_TOTAL_MEMORY_USED_SIZE AS instance_memory_used, INSTANCE_TOTAL_MEMORY_PEAK_USED_SIZE AS instance_memory_peak_used, INSTANCE_TOTAL_MEMORY_ALLOCATED_SIZE AS instance_memory_allocated, INSTANCE_CODE_SIZE AS instance_code, INSTANCE_SHARED_MEMORY_ALLOCATED_SIZE AS instance_shared_memory_allocated FROM M_HOST_RESOURCE_UTILIZATION;",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "physical_memory",
                "name_override": "host/memory/total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "physical_memory_used",
                "name_override": "host/memory/total_used_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "swap_space",
                "name_override": "host/swap_space/total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "swap_space_used",
                "name_override": "host/swap_space/total_used_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "instance_memory_used",
                "name_override": "host/instance_memory/total_used_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "instance_memory_peak_used",
                "name_override": "host/instance_memory/total_peak_used_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "instance_memory_allocated",
                "name_override": "host/instance_memory/total_allocated_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "instance_code",
                "name_override": "host/instance_code/total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "instance_shared_memory_allocated",
                "name_override": "host/instance_shared_memory/total_allocated_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "cpu_queries",
        "sql": "WITH cpu_stats AS (SELECT HOST AS host, TOTAL_CPU_USER_TIME AS cpu_user_time, TOTAL_CPU_SYSTEM_TIME AS cpu_sys_time, TOTAL_CPU_WIO_TIME AS cpu_wait_io_time, TOTAL_CPU_IDLE_TIME AS cpu_idle_time FROM M_HOST_RESOURCE_UTILIZATION) SELECT * FROM (SELECT host AS host, 'USER' AS type, cpu_user_time AS cpu_time FROM cpu_stats) UNION DISTINCT (SELECT host AS host, 'SYSTEM' AS type, cpu_sys_time AS cpu_time FROM cpu_stats) UNION DISTINCT (SELECT host AS host, 'WAIT' AS type, cpu_wait_io_time AS cpu_time FROM cpu_stats) UNION DISTINCT (SELECT host AS host, 'IDLE' AS type, cpu_idle_time AS cpu_time FROM cpu_stats);",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "type",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "cpu_time",
                "name_override": "host/cpu/usage_time",
                "metric_type": "METRIC_CUMULATIVE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "component_queries",
        "sql": "SELECT HOST AS host, COMPONENT AS component, SUM(USED_MEMORY_SIZE) AS mem_used FROM M_SERVICE_COMPONENT_MEMORY GROUP BY HOST, COMPONENT;",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "component",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "mem_used",
                "name_override": "component/memory/total_used_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "service_queries",
        "sql": "SELECT HOST AS host, SERVICE_NAME AS service_name, TOTAL_MEMORY_USED_SIZE AS mem_used, LOGICAL_MEMORY_SIZE AS virtual_mem_used, PHYSICAL_MEMORY_SIZE AS resident_mem_used, CODE_SIZE AS code_size, STACK_SIZE AS stack_size, HEAP_MEMORY_ALLOCATED_SIZE AS heap_mem_allocated, HEAP_MEMORY_USED_SIZE AS heap_mem_used, SHARED_MEMORY_ALLOCATED_SIZE AS shared_mem_allocated, SHARED_MEMORY_USED_SIZE AS shared_mem_used, COMPACTORS_ALLOCATED_SIZE AS compactors_allocated, COMPACTORS_FREEABLE_SIZE AS compactors_freeable, ALLOCATION_LIMIT AS max_mem_pool_size, EFFECTIVE_ALLOCATION_LIMIT AS effective_max_mem_pool_size FROM M_SERVICE_MEMORY;",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "service_name",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "mem_used",
                "name_override": "service/memory/total_used_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "virtual_mem_used",
                "name_override": "service/logical_memory/total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "resident_mem_used",
                "name_override": "service/physical_memory/total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "code_size",
                "name_override": "service/code/total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "stack_size",
                "name_override": "service/stack/total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "heap_mem_allocated",
                "name_override": "service/heap_memory/total_allocated_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "heap_mem_used",
                "name_override": "service/heap_memory/total_used_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "shared_mem_allocated",
                "name_override": "service/shared_memory/total_allocated_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "shared_mem_used",
                "name_override": "service/shared_memory/total_used_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "compactors_allocated",
                "name_override": "service/compactor/total_allocated_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "compactors_freeable",
                "name_override": "service/compactors/total_freeable_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "max_mem_pool_size",
                "name_override": "service/memory/allocation_limit",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "effective_max_mem_pool_size",
                "name_override": "service/memory/effective_allocation_limit",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "schema_queries",
        "sql": "SELECT HOST AS host, SCHEMA_NAME AS schema_name, SUM(ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL) AS est_max_mem_total, SUM(LAST_COMPRESSED_RECORD_COUNT) AS last_compressed_record_count, SUM(READ_COUNT) AS reads, SUM(WRITE_COUNT) AS writes, SUM(MERGE_COUNT) AS merges FROM M_CS_TABLES GROUP BY HOST, SCHEMA_NAME;",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "schema_name",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "est_max_mem_total",
                "name_override": "schema/memory/estimated_max_total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "last_compressed_record_count",
                "name_override": "schema/record/last_compressed_total",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "reads",
                "name_override": "schema/read/total_count",
                "metric_type": "METRIC_CUMULATIVE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "writes",
                "name_override": "schema/write/total_count",
                "metric_type": "METRIC_CUMULATIVE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "merges",
                "name_override": "schema/merge/total_count",
                "metric_type": "METRIC_CUMULATIVE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "schema_type_queries",
        "sql": "WITH stats AS (SELECT HOST AS host, SCHEMA_NAME AS schema_name, SUM(MEMORY_SIZE_IN_MAIN) AS mem_main, SUM(MEMORY_SIZE_IN_DELTA) AS mem_delta, SUM(MEMORY_SIZE_IN_HISTORY_MAIN) AS mem_hist_main, SUM(MEMORY_SIZE_IN_HISTORY_DELTA) AS mem_hist_delta, SUM(RAW_RECORD_COUNT_IN_MAIN) AS records_main, SUM(RAW_RECORD_COUNT_IN_DELTA) AS records_delta, SUM(RAW_RECORD_COUNT_IN_HISTORY_MAIN) AS records_hist_main, SUM(RAW_RECORD_COUNT_IN_HISTORY_DELTA) AS records_hist_delta  FROM M_CS_TABLES  GROUP BY HOST, SCHEMA_NAME) SELECT  * FROM (SELECT host AS host, schema_name AS schema_name, 'MAIN' AS part, mem_main AS memory, records_main AS records  FROM stats) UNION DISTINCT (SELECT host AS host, schema_name AS schema_name, 'DELTA' AS part, mem_delta AS memory, records_delta AS records  FROM stats) UNION DISTINCT (SELECT host AS host, schema_name AS schema_name, 'HISTORY_MAIN' AS part, mem_hist_main AS memory, records_main AS records FROM stats) UNION DISTINCT (SELECT host AS host, schema_name AS schema_name, 'HISTORY_DELTA' AS part, mem_hist_delta AS memory, records_delta AS records FROM stats);",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "schema_name",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "part",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "memory",
                "name_override": "schema/memory/total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            },
            {
                "name": "records",
                "name_override": "schema/record/total",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "column_queries",
        "sql": "WITH stats AS (SELECT HOST AS host, SUM(MAIN_MEMORY_SIZE_IN_DATA) AS mem_main_data, SUM(MAIN_MEMORY_SIZE_IN_DICT) AS mem_main_dict, SUM(MAIN_MEMORY_SIZE_IN_INDEX) AS mem_main_index, SUM(MAIN_MEMORY_SIZE_IN_MISC) AS mem_main_misc, SUM(DELTA_MEMORY_SIZE_IN_DATA) AS mem_delta_data, SUM(DELTA_MEMORY_SIZE_IN_DICT) AS mem_delta_dict, SUM(DELTA_MEMORY_SIZE_IN_INDEX) AS mem_delta_index, SUM(DELTA_MEMORY_SIZE_IN_MISC) AS mem_delta_misc  FROM M_CS_ALL_COLUMNS  GROUP BY HOST) SELECT  * FROM (SELECT host AS host, 'MAIN' AS part, 'DATA' AS type, mem_main_data AS memory FROM stats) UNION DISTINCT (SELECT host AS host, 'MAIN' AS part, 'DICT' AS type, mem_main_dict AS memory  FROM stats) UNION DISTINCT (SELECT host AS host, 'MAIN' AS part, 'INDEX' AS type, mem_main_index AS memory  FROM stats) UNION DISTINCT (SELECT host AS host, 'MAIN' AS part, 'MISC' AS type, mem_main_misc AS memory  FROM stats) UNION DISTINCT (SELECT host AS host, 'DELTA' AS part, 'DATA' AS type, mem_delta_data AS memory  FROM stats) UNION DISTINCT (SELECT host AS host, 'DELTA' AS part, 'DICT' AS type, mem_delta_dict AS memory  FROM stats) UNION DISTINCT (SELECT host AS host, 'DELTA' AS part, 'INDEX' AS type, mem_delta_index AS memory  FROM stats) UNION DISTINCT (SELECT host AS host, 'DELTA' AS part, 'MISC' AS type, mem_delta_misc AS memory  FROM stats);",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "part",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "type",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "memory",
                "name_override": "column/memory/total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "alert_query",
        "sql": "SELECT ALERT_RATING as alert_rating, COUNT(INDEX) AS alerts FROM _SYS_STATISTICS.STATISTICS_CURRENT_ALERTS GROUP BY ALERT_RATING;",
        "columns": [
            {
                "name": "alert_rating",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "alerts",
                "name_override": "system/alert/total",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "rowstore_query",
        "sql": "SELECT SUM(USED_FIXED_PART_SIZE + USED_VARIABLE_PART_SIZE) AS rowstore_size FROM M_RS_TABLES;",
        "columns": [
            {
                "name": "rowstore_size",
                "name_override": "rowstore/memory/total_size",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "connection_query",
        "sql": "SELECT CONNECTION_STATUS as connection_status, COUNT(*) AS connections FROM SYS.M_CONNECTIONS WHERE CONNECTION_STATUS = 'IDLE' OR CONNECTION_STATUS = 'RUNNING' GROUP BY CONNECTION_STATUS;",
        "columns": [
            {
                "name": "connection_status",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "connections",
                "name_override": "system/connection/total",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "replication_query",
        "sql": "SELECT HOST AS primary_host, PORT AS port, REPLICATION_MODE AS mode, SECONDARY_HOST AS secondary_host, LPAD(TO_DECIMAL(IFNULL(MAP(SHIPPED_LOG_BUFFERS_COUNT, 0, 0, SHIPPED_LOG_BUFFERS_DURATION / 1000 / SHIPPED_LOG_BUFFERS_COUNT), 0), 10, 2), 12, '') AS data_latency_ms FROM M_SERVICE_REPLICATION;",
        "columns": [
            {
                "name": "primary_host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "port",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "mode",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "secondary_host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "data_latency_ms",
                "name_override": "system/replication_data_latency/total_time",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_DOUBLE"
            }
        ]
    },
    {
        "name": "transaction_query",
        "sql": "SELECT HOST AS host, PORT AS port, SUM(UPDATE_TRANSACTION_COUNT + COMMIT_COUNT + ROLLBACK_COUNT) AS transactions FROM SYS.M_WORKLOAD GROUP BY HOST, PORT;",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "port",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "transactions",
                "name_override": "system/transaction/total_count",
                "metric_type": "METRIC_CUMULATIVE",
                "value_type": "VALUE_INT64"
            }
        ]
    },
    {
        "name": "blocked_transaction_queries",
        "sql": "select DATABASE_NAME, STATS.HOST, SVC.SERVICE_NAME, LOCK_TYPE, count(*) from M_DATABASES, M_SERVICES SVC, M_BLOCKED_TRANSACTIONS STATS where STATS.HOST=SVC.HOST AND STATS.PORT=SVC.PORT GROUP BY DATABASE_NAME, STATS.HOST, SERVICE_NAME, LOCK_TYPE;",
        "columns": [
            {
                "name": "database_name",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "service",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "lock_type",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "count",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64",
                "name_override": "transactions/blocked"
            }
        ]
    },
    {
        "name": "data_backup_state_queries",
        "sql": "select (CASE WHEN STATE_NAME = 'successful' THEN 1 ELSE 0 END), ENTRY_TYPE_NAME, UTC_END_TIME AS last_backup_time, BACKUP_ID from M_BACKUP_CATALOG where ENTRY_TYPE_NAME LIKE '%data backup%' ORDER BY LAST_BACKUP_TIME DESC LIMIT 1",
        "columns": [
            {
                "name": "state_name",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64",
                "name_override": "backups/data"
            },
            {
                "name": "entry_type_name",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "last_backup_time",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "backup_id",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            }
        ]
    },
    {
        "name": "data_snapshot_state_queries",
        "sql": "select (CASE WHEN STATE_NAME = 'successful' THEN 1 ELSE 0 END), ENTRY_TYPE_NAME, UTC_END_TIME AS last_snapshot_time, BACKUP_ID from M_BACKUP_CATALOG where ENTRY_TYPE_NAME LIKE '%data snapshot%' ORDER BY LAST_SNAPSHOT_TIME DESC LIMIT 1",
        "columns": [
            {
                "name": "state_name",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64",
                "name_override": "backups/snapshot"
            },
            {
                "name": "entry_type_name",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "last_snapshot_time",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "backup_id",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            }
        ]
    },
    {
        "name": "log_backup_state_queries",
        "sql": "WITH RecentLogBackups AS ( SELECT TOP 20 * FROM M_BACKUP_CATALOG WHERE ENTRY_TYPE_NAME = 'log backup' ) SELECT IFNULL(SUM(CASE WHEN STATE_NAME = 'successful' THEN 1 ELSE 0 END), 0) AS successful_backups, IFNULL(SUM(CASE WHEN STATE_NAME = 'failed' THEN 1 ELSE 0 END), 0) AS failed_backups FROM RecentLogBackups;",
        "columns": [
            {
                "name": "successful_backups",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64",
                "name_override": "backups/log"
            },
            {
                "name": "failed_backups",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            }
        ]
    },
    {
        "name": "memory_unloads_queries",
        "sql": "SELECT HOST,TABLE_NAME,COUNT(*) FROM M_CS_UNLOADS where REASON='LOW MEMORY' GROUP BY TABLE_NAME,HOST",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "table_name",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "count",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64",
                "name_override": "memory/unloads"
            }
        ]
    },
    {
        "name": "avg_write_time_queries",
        "sql": "select host, type, avg_write_time from PUBLIC.M_VOLUME_IO_DETAILED_STATISTICS where (type = 'LOG' or type = 'DATA') and volume_id in (select volume_id from m_volumes where service_name = 'indexserver') and (write_count <> 0 or avg_trigger_async_write_time <> 0) and avg_write_time <>0",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "type",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "avg_write_time",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64",
                "name_override": "disk/writetime"
            }
        ]
    },
    {
        "name": "avg_read_time_queries",
        "sql": "select host,type, avg_read_time from PUBLIC.M_VOLUME_IO_DETAILED_STATISTICS where type = 'DATA' and volume_id in (select volume_id from m_volumes where service_name = 'indexserver') and (read_count <> 0 or avg_trigger_async_read_time <> 0) and avg_read_time <>0",
        "columns": [
            {
                "name": "host",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "type",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "avg_read_time",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64",
                "name_override": "disk/readtime"
            }
        ]
    },
    {
        "name": "log_backup_catalog_queries",
        "sql": "SELECT C.BACKUP_ID, C.ENTRY_TYPE_NAME AS BACKUP_TYPE, C.SYS_START_TIME AS BACKUP_START_TIME, C.SYS_END_TIME AS BACKUP_END_TIME, MIN(F.DESTINATION_PATH) AS BACKUP_PATH, C.COMMENT AS BACKUP_COMMENT, CAST(COALESCE(TO_DECIMAL((SECONDS_BETWEEN(C.SYS_START_TIME, C.SYS_END_TIME)), 10, 2), 0.00) AS VARCHAR(20)) AS BACKUP_DURATION_S, CAST(COALESCE(TO_DECIMAL(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024), 10, 2), 0.00) AS VARCHAR(20)) AS BACKUP_SIZE_MB, CAST(COALESCE( ROUND(( COALESCE(TO_DECIMAL(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024), 10, 2), 0.00) / NULLIF(COALESCE(TO_DECIMAL(SECONDS_BETWEEN(C.SYS_START_TIME, C.SYS_END_TIME)), 10, 2), 0) ), 2), COALESCE(TO_DECIMAL(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024), 10, 2), 0.00) ) AS VARCHAR(20)) AS BACKUP_THROUGHPUT_MBS, CAST(C.STATE_NAME AS VARCHAR(20)) AS BACKUP_STATE, (SELECT VALUE FROM M_SYSTEM_OVERVIEW WHERE NAME='Instance ID') AS SID, CASE WHEN C.STATE_NAME = 'successful' THEN 1 ELSE 0 END AS VALUE FROM M_BACKUP_CATALOG AS C JOIN M_BACKUP_CATALOG_FILES AS F ON C.BACKUP_ID = F.BACKUP_ID WHERE C.ENTRY_TYPE_NAME LIKE '%log backup%' AND SOURCE_TYPE_NAME='volume' AND C.STATE_NAME!='running' GROUP BY C.BACKUP_ID, C.ENTRY_TYPE_NAME, C.SYS_START_TIME, C.SYS_END_TIME,C.STATE_NAME, C.COMMENT ORDER BY C.SYS_START_TIME DESC LIMIT 20",
        "columns": [
            {
                "name": "BACKUP_ID",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_TYPE",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_START_TIME",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_END_TIME",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_PATH",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_COMMENT",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_DURATION_S",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_SIZE_MB",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_THROUGHPUT_MBS",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_STATE",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "SID",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "VALUE",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64",
                "name_override": "backups/log/catalog"
            }
        ]
    },
    {
        "name": "data_backup_catalog_queries",
        "sql": "SELECT C.BACKUP_ID, C.ENTRY_TYPE_NAME AS BACKUP_TYPE, C.SYS_START_TIME AS BACKUP_START_TIME, C.SYS_END_TIME AS BACKUP_END_TIME, MIN(F.DESTINATION_PATH) AS BACKUP_PATH, C.COMMENT AS BACKUP_COMMENT, CAST(COALESCE(TO_DECIMAL((SECONDS_BETWEEN(C.SYS_START_TIME, C.SYS_END_TIME)), 10, 2), 0.00) AS VARCHAR(20)) AS BACKUP_DURATION, CAST(COALESCE(TO_DECIMAL(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024), 10, 2), 0.00) AS VARCHAR(20)) AS BACKUP_SIZE, CAST(COALESCE( ROUND(( COALESCE(TO_DECIMAL(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024), 10, 2), 0.00) / NULLIF(COALESCE(TO_DECIMAL(SECONDS_BETWEEN(C.SYS_START_TIME, C.SYS_END_TIME)), 10, 2), 0) ), 2), COALESCE(TO_DECIMAL(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024), 10, 2), 0.00) ) AS VARCHAR(20)) AS BACKUP_THROUGHPUT, CAST(C.STATE_NAME AS VARCHAR(20)) AS backup_state, (SELECT VALUE FROM M_SYSTEM_OVERVIEW WHERE NAME='Instance ID') AS SID, CASE WHEN C.STATE_NAME = 'successful' THEN 1 ELSE 0 END AS VALUE FROM M_BACKUP_CATALOG AS C JOIN M_BACKUP_CATALOG_FILES AS F ON C.BACKUP_ID = F.BACKUP_ID WHERE C.ENTRY_TYPE_NAME LIKE '%data backup%' AND C.STATE_NAME!='running' GROUP BY C.BACKUP_ID, C.ENTRY_TYPE_NAME, C.SYS_START_TIME, C.SYS_END_TIME,C.STATE_NAME, C.COMMENT ORDER BY C.SYS_START_TIME DESC LIMIT 10",
        "columns": [
            {
                "name": "BACKUP_ID",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_TYPE",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_START_TIME",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_END_TIME",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_PATH",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_COMMENT",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_DURATION_S",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_SIZE_MB",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_THROUGHPUT_MBS",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "BACKUP_STATE",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "SID",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "VALUE",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64",
                "name_override": "backups/data/catalog"
            }
        ]
    },
    {
        "name": "latest_data_backup_queries",
        "sql": "SELECT C.ENTRY_TYPE_NAME AS BACKUP_TYPE, COALESCE(CAST(SECONDS_BETWEEN(C.SYS_START_TIME, C.SYS_END_TIME) AS FLOAT), 0.00) AS LATEST_BACKUP_DURATION_S, ROUND(COALESCE(CAST(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024) AS FLOAT), 0.00), 2) AS LATEST_BACKUP_SIZE_MB, COALESCE( ROUND(( COALESCE(CAST(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024) AS FLOAT), 0.00) / NULLIF(COALESCE(CAST(SECONDS_BETWEEN(C.SYS_START_TIME, C.SYS_END_TIME) AS FLOAT), 0.00), 0) ), 2), ROUND(COALESCE(CAST(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024) AS FLOAT), 0.00), 2) ) AS LATEST_BACKUP_THROUGHPUT_MBS, (SELECT VALUE FROM M_SYSTEM_OVERVIEW WHERE NAME='Instance ID') AS SID FROM M_BACKUP_CATALOG AS C JOIN M_BACKUP_CATALOG_FILES AS F ON C.BACKUP_ID = F.BACKUP_ID WHERE C.ENTRY_TYPE_NAME LIKE '%data backup%' AND C.STATE_NAME!='running' GROUP BY C.BACKUP_ID, C.ENTRY_TYPE_NAME, C.SYS_START_TIME, C.SYS_END_TIME, C.STATE_NAME ORDER BY C.SYS_END_TIME DESC LIMIT 1",
        "columns": [
            {
                "name": "BACKUP_TYPE",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "LATEST_BACKUP_DURATION_S",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_DOUBLE",
                 "name_override": "backups/data/duration_s"
            },
            {
                "name": "LATEST_BACKUP_SIZE_MB",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_DOUBLE",
                 "name_override": "backups/data/size_mb"
            },
            {
                "name": "LATEST_BACKUP_THROUGHPUT_MBS",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_DOUBLE",
                 "name_override": "backups/data/throughput_mb_s"
            },
            {
                "name": "SID",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            }
        ]
    },
    {
        "name": "latest_log_backup_queries",
        "sql": "SELECT C.ENTRY_TYPE_NAME AS BACKUP_TYPE, COALESCE(CAST(SECONDS_BETWEEN(C.SYS_START_TIME, C.SYS_END_TIME) AS FLOAT), 0.00) AS LATEST_BACKUP_DURATION, ROUND(COALESCE(CAST(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024) AS FLOAT), 0.00), 2) AS LATEST_BACKUP_SIZE, COALESCE( ROUND(( COALESCE(CAST(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024) AS FLOAT), 0.00) / NULLIF(COALESCE(CAST(SECONDS_BETWEEN(C.SYS_START_TIME, C.SYS_END_TIME) AS FLOAT), 0.00), 0) ), 2), ROUND(COALESCE(CAST(SUM(TO_DOUBLE(F.BACKUP_SIZE)/1024/1024) AS FLOAT), 0.00), 2) ) AS LATEST_BACKUP_THROUGHPUT, (SELECT VALUE FROM M_SYSTEM_OVERVIEW WHERE NAME='Instance ID') AS SID FROM M_BACKUP_CATALOG AS C JOIN M_BACKUP_CATALOG_FILES AS F ON C.BACKUP_ID = F.BACKUP_ID WHERE C.ENTRY_TYPE_NAME LIKE '%log backup%' AND F.SOURCE_TYPE_NAME='volume' AND C.STATE_NAME!='running' GROUP BY C.BACKUP_ID, C.ENTRY_TYPE_NAME, C.SYS_START_TIME, C.SYS_END_TIME, C.STATE_NAME ORDER BY C.SYS_END_TIME DESC LIMIT 1",
        "columns": [
            {
                "name": "BACKUP_TYPE",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            },
            {
                "name": "LATEST_BACKUP_DURATION_S",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_DOUBLE",
                 "name_override": "backups/log/duration_s"
            },
            {
                "name": "LATEST_BACKUP_SIZE_MB",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_DOUBLE",
                 "name_override": "backups/log/size_mb"
            },
            {
                "name": "LATEST_BACKUP_THROUGHPUT_MBS",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_DOUBLE",
                 "name_override": "backups/log/throughput_mb_s"
            },
            {
                "name": "SID",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            }
        ]
    },
    {
        "name": "backup_catalog_size_queries",
        "sql": "SELECT CAST(LPAD(TO_DECIMAL(COALESCE(CAST(BF.BACKUP_SIZE / 1024 / 1024 AS FLOAT), 0.00), 10, 2), 8) AS FLOAT) AS BACKUP_CATALOG_SIZE_MB, (SELECT VALUE FROM M_SYSTEM_OVERVIEW WHERE NAME='Instance ID') AS SID FROM M_BACKUP_CATALOG C INNER JOIN M_BACKUP_CATALOG_FILES BF ON C.BACKUP_ID = BF.BACKUP_ID WHERE BF.SOURCE_TYPE_NAME = 'catalog' AND C.STATE_NAME = 'successful' ORDER BY C.SYS_START_TIME DESC LIMIT 1",
        "columns": [
            {
                "name": "BACKUP_CATALOG_SIZE_MB",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_DOUBLE",
                "name_override":"backups/catalog/size_mb"
            },
            {
                "name": "SID",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            }
        ]
    },
    {
        "name": "oldest_backup_catalog_date_queries",
        "sql": "SELECT COALESCE(CAST(LPAD(CAST(DAYS_BETWEEN(MIN(SYS_START_TIME), CURRENT_TIMESTAMP) AS INT), 8) AS INT), 0) AS BACKUP_CATALOG_RETENTION_DAYS, (SELECT VALUE FROM M_SYSTEM_OVERVIEW WHERE NAME='Instance ID') AS SID FROM M_BACKUP_CATALOG",
        "columns": [
            {
                "name": "BACKUP_CATALOG_RETENTION_DAYS",
                "metric_type": "METRIC_GAUGE",
                "value_type": "VALUE_INT64",
                "name_override":"backups/catalog/retention_days"
            },
            {
                "name": "SID",
                "metric_type": "METRIC_LABEL",
                "value_type": "VALUE_STRING"
            }
        ]
    }
  ]
}
