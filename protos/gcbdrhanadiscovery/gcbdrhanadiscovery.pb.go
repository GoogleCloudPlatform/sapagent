//
//Copyright 2024 Google LLC
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//https://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.23.4
// source: protos/gcbdrhanadiscovery/gcbdrhanadiscovery.proto

package gcbdrhanadiscovery

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApplicationsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apps []*Application `protobuf:"bytes,1,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *ApplicationsList) Reset() {
	*x = ApplicationsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationsList) ProtoMessage() {}

func (x *ApplicationsList) ProtoReflect() protoreflect.Message {
	mi := &file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationsList.ProtoReflect.Descriptor instead.
func (*ApplicationsList) Descriptor() ([]byte, []int) {
	return file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDescGZIP(), []int{0}
}

func (x *ApplicationsList) GetApps() []*Application {
	if x != nil {
		return x.Apps
	}
	return nil
}

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                   string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Dbsid                  string      `protobuf:"bytes,2,opt,name=dbsid,proto3" json:"dbsid,omitempty"`
	Type                   string      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	HanaVersion            string      `protobuf:"bytes,4,opt,name=hana_version,json=hanaVersion,proto3" json:"hana_version,omitempty"`
	ConfigType             string      `protobuf:"bytes,5,opt,name=config_type,json=configType,proto3" json:"config_type,omitempty"`
	HardwareKey            string      `protobuf:"bytes,6,opt,name=hardware_key,json=hardwareKey,proto3" json:"hardware_key,omitempty"`
	Port                   string      `protobuf:"bytes,7,opt,name=port,proto3" json:"port,omitempty"`
	HanaNodes              string      `protobuf:"bytes,8,opt,name=hana_nodes,json=hanaNodes,proto3" json:"hana_nodes,omitempty"`
	MasterNode             string      `protobuf:"bytes,9,opt,name=master_node,json=masterNode,proto3" json:"master_node,omitempty"`
	ReplicationNodes       string      `protobuf:"bytes,10,opt,name=replication_nodes,json=replicationNodes,proto3" json:"replication_nodes,omitempty"`
	Instance               string      `protobuf:"bytes,11,opt,name=instance,proto3" json:"instance,omitempty"`
	CatalogBackupPath      string      `protobuf:"bytes,12,opt,name=catalog_backup_path,json=catalogBackupPath,proto3" json:"catalog_backup_path,omitempty"`
	GlobalInitPath         string      `protobuf:"bytes,13,opt,name=global_init_path,json=globalInitPath,proto3" json:"global_init_path,omitempty"`
	ManifestFileLocation   string      `protobuf:"bytes,14,opt,name=manifest_file_location,json=manifestFileLocation,proto3" json:"manifest_file_location,omitempty"`
	DataVolumeOwner        string      `protobuf:"bytes,15,opt,name=data_volume_owner,json=dataVolumeOwner,proto3" json:"data_volume_owner,omitempty"`
	Size                   int64       `protobuf:"varint,16,opt,name=size,proto3" json:"size,omitempty"`
	DbNames                string      `protobuf:"bytes,17,opt,name=db_names,json=dbNames,proto3" json:"db_names,omitempty"`
	DataVolume             string      `protobuf:"bytes,18,opt,name=data_volume,json=dataVolume,proto3" json:"data_volume,omitempty"`
	LogVolume              string      `protobuf:"bytes,19,opt,name=log_volume,json=logVolume,proto3" json:"log_volume,omitempty"`
	LogBackupVolume        string      `protobuf:"bytes,20,opt,name=log_backup_volume,json=logBackupVolume,proto3" json:"log_backup_volume,omitempty"`
	DataVolMountPoint      string      `protobuf:"bytes,21,opt,name=data_vol_mount_point,json=dataVolMountPoint,proto3" json:"data_vol_mount_point,omitempty"`
	LogVolMountPoint       string      `protobuf:"bytes,22,opt,name=log_vol_mount_point,json=logVolMountPoint,proto3" json:"log_vol_mount_point,omitempty"`
	LogBackupVolMountPoint string      `protobuf:"bytes,23,opt,name=log_backup_vol_mount_point,json=logBackupVolMountPoint,proto3" json:"log_backup_vol_mount_point,omitempty"`
	DataVolVgname          string      `protobuf:"bytes,24,opt,name=data_vol_vgname,json=dataVolVgname,proto3" json:"data_vol_vgname,omitempty"`
	DataVolLvname          string      `protobuf:"bytes,25,opt,name=data_vol_lvname,json=dataVolLvname,proto3" json:"data_vol_lvname,omitempty"`
	DataVolPdName          string      `protobuf:"bytes,26,opt,name=data_vol_pd_name,json=dataVolPdName,proto3" json:"data_vol_pd_name,omitempty"`
	LogVolVgname           string      `protobuf:"bytes,27,opt,name=log_vol_vgname,json=logVolVgname,proto3" json:"log_vol_vgname,omitempty"`
	LogVolLvname           string      `protobuf:"bytes,28,opt,name=log_vol_lvname,json=logVolLvname,proto3" json:"log_vol_lvname,omitempty"`
	LogVolPdname           string      `protobuf:"bytes,29,opt,name=log_vol_pdname,json=logVolPdname,proto3" json:"log_vol_pdname,omitempty"`
	LogBackupVolVgname     string      `protobuf:"bytes,30,opt,name=log_backup_vol_vgname,json=logBackupVolVgname,proto3" json:"log_backup_vol_vgname,omitempty"`
	LogBackupLvname        string      `protobuf:"bytes,31,opt,name=log_backup_lvname,json=logBackupLvname,proto3" json:"log_backup_lvname,omitempty"`
	LogBackupPdName        string      `protobuf:"bytes,32,opt,name=log_backup_pd_name,json=logBackupPdName,proto3" json:"log_backup_pd_name,omitempty"`
	VolumeDetails          []*VolumePD `protobuf:"bytes,33,rep,name=volume_details,json=volumeDetails,proto3" json:"volume_details,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDescGZIP(), []int{1}
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetDbsid() string {
	if x != nil {
		return x.Dbsid
	}
	return ""
}

func (x *Application) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Application) GetHanaVersion() string {
	if x != nil {
		return x.HanaVersion
	}
	return ""
}

func (x *Application) GetConfigType() string {
	if x != nil {
		return x.ConfigType
	}
	return ""
}

func (x *Application) GetHardwareKey() string {
	if x != nil {
		return x.HardwareKey
	}
	return ""
}

func (x *Application) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Application) GetHanaNodes() string {
	if x != nil {
		return x.HanaNodes
	}
	return ""
}

func (x *Application) GetMasterNode() string {
	if x != nil {
		return x.MasterNode
	}
	return ""
}

func (x *Application) GetReplicationNodes() string {
	if x != nil {
		return x.ReplicationNodes
	}
	return ""
}

func (x *Application) GetInstance() string {
	if x != nil {
		return x.Instance
	}
	return ""
}

func (x *Application) GetCatalogBackupPath() string {
	if x != nil {
		return x.CatalogBackupPath
	}
	return ""
}

func (x *Application) GetGlobalInitPath() string {
	if x != nil {
		return x.GlobalInitPath
	}
	return ""
}

func (x *Application) GetManifestFileLocation() string {
	if x != nil {
		return x.ManifestFileLocation
	}
	return ""
}

func (x *Application) GetDataVolumeOwner() string {
	if x != nil {
		return x.DataVolumeOwner
	}
	return ""
}

func (x *Application) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Application) GetDbNames() string {
	if x != nil {
		return x.DbNames
	}
	return ""
}

func (x *Application) GetDataVolume() string {
	if x != nil {
		return x.DataVolume
	}
	return ""
}

func (x *Application) GetLogVolume() string {
	if x != nil {
		return x.LogVolume
	}
	return ""
}

func (x *Application) GetLogBackupVolume() string {
	if x != nil {
		return x.LogBackupVolume
	}
	return ""
}

func (x *Application) GetDataVolMountPoint() string {
	if x != nil {
		return x.DataVolMountPoint
	}
	return ""
}

func (x *Application) GetLogVolMountPoint() string {
	if x != nil {
		return x.LogVolMountPoint
	}
	return ""
}

func (x *Application) GetLogBackupVolMountPoint() string {
	if x != nil {
		return x.LogBackupVolMountPoint
	}
	return ""
}

func (x *Application) GetDataVolVgname() string {
	if x != nil {
		return x.DataVolVgname
	}
	return ""
}

func (x *Application) GetDataVolLvname() string {
	if x != nil {
		return x.DataVolLvname
	}
	return ""
}

func (x *Application) GetDataVolPdName() string {
	if x != nil {
		return x.DataVolPdName
	}
	return ""
}

func (x *Application) GetLogVolVgname() string {
	if x != nil {
		return x.LogVolVgname
	}
	return ""
}

func (x *Application) GetLogVolLvname() string {
	if x != nil {
		return x.LogVolLvname
	}
	return ""
}

func (x *Application) GetLogVolPdname() string {
	if x != nil {
		return x.LogVolPdname
	}
	return ""
}

func (x *Application) GetLogBackupVolVgname() string {
	if x != nil {
		return x.LogBackupVolVgname
	}
	return ""
}

func (x *Application) GetLogBackupLvname() string {
	if x != nil {
		return x.LogBackupLvname
	}
	return ""
}

func (x *Application) GetLogBackupPdName() string {
	if x != nil {
		return x.LogBackupPdName
	}
	return ""
}

func (x *Application) GetVolumeDetails() []*VolumePD {
	if x != nil {
		return x.VolumeDetails
	}
	return nil
}

type VolumePD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeName       string `protobuf:"bytes,1,opt,name=volume_name,json=volumeName,proto3" json:"volume_name,omitempty"`
	MountPoint       string `protobuf:"bytes,2,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
	VolumeType       string `protobuf:"bytes,3,opt,name=volume_type,json=volumeType,proto3" json:"volume_type,omitempty"`
	VolumeGroup      string `protobuf:"bytes,4,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
	LogicalName      string `protobuf:"bytes,5,opt,name=logical_name,json=logicalName,proto3" json:"logical_name,omitempty"`
	PdHostDevicename string `protobuf:"bytes,6,opt,name=pd_host_devicename,json=pdHostDevicename,proto3" json:"pd_host_devicename,omitempty"`
	DiskInterface    string `protobuf:"bytes,7,opt,name=disk_interface,json=diskInterface,proto3" json:"disk_interface,omitempty"`
}

func (x *VolumePD) Reset() {
	*x = VolumePD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumePD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumePD) ProtoMessage() {}

func (x *VolumePD) ProtoReflect() protoreflect.Message {
	mi := &file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumePD.ProtoReflect.Descriptor instead.
func (*VolumePD) Descriptor() ([]byte, []int) {
	return file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDescGZIP(), []int{2}
}

func (x *VolumePD) GetVolumeName() string {
	if x != nil {
		return x.VolumeName
	}
	return ""
}

func (x *VolumePD) GetMountPoint() string {
	if x != nil {
		return x.MountPoint
	}
	return ""
}

func (x *VolumePD) GetVolumeType() string {
	if x != nil {
		return x.VolumeType
	}
	return ""
}

func (x *VolumePD) GetVolumeGroup() string {
	if x != nil {
		return x.VolumeGroup
	}
	return ""
}

func (x *VolumePD) GetLogicalName() string {
	if x != nil {
		return x.LogicalName
	}
	return ""
}

func (x *VolumePD) GetPdHostDevicename() string {
	if x != nil {
		return x.PdHostDevicename
	}
	return ""
}

func (x *VolumePD) GetDiskInterface() string {
	if x != nil {
		return x.DiskInterface
	}
	return ""
}

var File_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto protoreflect.FileDescriptor

var file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDesc = []byte{
	0x0a, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67, 0x63, 0x62, 0x64, 0x72, 0x68, 0x61,
	0x6e, 0x61, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x63, 0x62, 0x64,
	0x72, 0x68, 0x61, 0x6e, 0x61, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x73, 0x61, 0x70, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x67, 0x63, 0x62, 0x64, 0x72, 0x68, 0x61, 0x6e, 0x61, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x22, 0x57, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x04,
	0x61, 0x70, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x61, 0x70,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x67, 0x63, 0x62,
	0x64, 0x72, 0x68, 0x61, 0x6e, 0x61, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x70, 0x70,
	0x73, 0x22, 0x8e, 0x0a, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x62, 0x73, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x62, 0x73, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61,
	0x6e, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x68, 0x61, 0x6e, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a,
	0x16, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f,
	0x6c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6c,
	0x6f, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x56, 0x6f, 0x6c,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x6f,
	0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x6c, 0x6f, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x56, 0x6f, 0x6c, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76,
	0x6f, 0x6c, 0x5f, 0x76, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x56, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x6c, 0x76, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c,
	0x4c, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76,
	0x6f, 0x6c, 0x5f, 0x70, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x50, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x76, 0x67, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x56, 0x6f, 0x6c, 0x56,
	0x67, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x6f, 0x6c,
	0x5f, 0x6c, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x6f, 0x67, 0x56, 0x6f, 0x6c, 0x4c, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x70, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x56, 0x6f, 0x6c, 0x50, 0x64, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x76, 0x6f, 0x6c, 0x5f, 0x76, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x6f, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x56, 0x6f, 0x6c, 0x56, 0x67,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x6c, 0x76, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x6f, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4c, 0x76, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f,
	0x67, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a,
	0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x61, 0x70, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x67, 0x63, 0x62, 0x64, 0x72, 0x68, 0x61, 0x6e,
	0x61, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x44, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x08, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x44, 0x12,
	0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x64, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x43, 0x5a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x73, 0x61, 0x70, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x67, 0x63, 0x62, 0x64, 0x72, 0x68, 0x61, 0x6e, 0x61, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDescOnce sync.Once
	file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDescData = file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDesc
)

func file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDescGZIP() []byte {
	file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDescOnce.Do(func() {
		file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDescData)
	})
	return file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDescData
}

var file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_goTypes = []interface{}{
	(*ApplicationsList)(nil), // 0: sapagent.protos.gcbdrhanadiscovery.ApplicationsList
	(*Application)(nil),      // 1: sapagent.protos.gcbdrhanadiscovery.Application
	(*VolumePD)(nil),         // 2: sapagent.protos.gcbdrhanadiscovery.VolumePD
}
var file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_depIdxs = []int32{
	1, // 0: sapagent.protos.gcbdrhanadiscovery.ApplicationsList.apps:type_name -> sapagent.protos.gcbdrhanadiscovery.Application
	2, // 1: sapagent.protos.gcbdrhanadiscovery.Application.volume_details:type_name -> sapagent.protos.gcbdrhanadiscovery.VolumePD
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_init() }
func file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_init() {
	if File_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumePD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_goTypes,
		DependencyIndexes: file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_depIdxs,
		MessageInfos:      file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_msgTypes,
	}.Build()
	File_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto = out.File
	file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_rawDesc = nil
	file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_goTypes = nil
	file_protos_gcbdrhanadiscovery_gcbdrhanadiscovery_proto_depIdxs = nil
}
