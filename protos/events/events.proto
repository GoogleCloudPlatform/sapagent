/*
Copyright 2023 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package sapagent.protos.events;

option java_multiple_files = true;
option go_package = "github.com/GoogleCloudPlatform/sapagent/protos/events";

message Rule {
  string name = 1;  // Optional - rule name

  // Required: Unique ID of the rule - must be unique across all rules.
  string id = 2;
  repeated string labels = 3;

  // Each event will come from a single source produces a single numeric(int or
  // float) or string value.
  EventSource source = 4;

  // Condition evaluation to decide if event should be triggered.
  EvalNode trigger = 5;

  // We can send same event to multiple targets.
  repeated EventTarget target = 6;
  int64 frequency_sec = 7;  // Event source polling frequency in seconds.
  bool force_trigger = 8;   // Optional - for internal testing
}

message EventSource {
  enum ValueType {
    UNSPECIFIED = 0;
    BOOL = 1;
    INT64 = 2;
    STRING = 3;
    DOUBLE = 4;
  }

  message CloudMonitoringMetric {
    string metric_url = 1;  // ex: workload.googleapis.com/sap/hana/myevent

    // User specifies either the label name or the type of the metric value.
    oneof metric {
      string label_name = 2;
      // We are using the metric value, specify the value type.
      ValueType metric_value_type = 3;
    }
  }

  message CloudLogging {
    // Logging query written in
    // https://cloud.google.com/logging/docs/view/logging-query-language
    string log_query = 1;

    // Value type returned by the cloud logging query.
    ValueType value_type = 2;
  }

  message Metadata {
    string url = 1;
    ValueType value_type = 2;  // Value type returned by the GCP METADATA.
  }

  message GuestLog {
    // A Linux command to search for particular string in a file, ex:
    // grep "ERROR" /var/log/google-cloud-sap-agent.log
    string command = 1;
    ValueType value_type = 2;  // Value type returned by the command.
  }
  oneof source {
    CloudMonitoringMetric cloud_monitoring_metric = 1;
    CloudLogging cloud_logging = 2;
    Metadata metadata = 3;
    GuestLog guest_log = 4;
  }
}

message EventTarget {
  oneof target {
    string http_endpoint = 1;
    string file_endpoint = 2;
  }
}

message EvalNode {
  enum EvalType {
    UNDEFINED = 0;
    EQ = 1;
    NEQ = 2;
    LT = 3;
    LTE = 4;
    GT = 5;
    GTE = 6;
    EQSTR = 7;
    SUBSTR = 8;
  }
  string rhs = 2;
  EvalType operation = 3;
}
